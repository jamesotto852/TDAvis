% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simplicial-complex.R
\docType{data}
\name{geom_simplicial_complex}
\alias{geom_simplicial_complex}
\alias{StatSimplicialComplex}
\alias{stat_simplicial_complex}
\alias{GeomSimplicialComplex}
\title{Simplicial complexes from 2-d point clouds}
\format{
An object of class \code{StatSimplicialComplex} (inherits from \code{Stat}, \code{ggproto}, \code{gg}) of length 4.

An object of class \code{GeomSimplicialComplex} (inherits from \code{Geom}, \code{ggproto}, \code{gg}) of length 6.
}
\usage{
StatSimplicialComplex

stat_simplicial_complex(
  mapping = NULL,
  data = NULL,
  geom = "SimplicialComplex",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  radius = NULL,
  diameter = NULL,
  k = 10,
  complex = "Rips",
  inherit.aes = TRUE,
  ...
)

GeomSimplicialComplex

geom_simplicial_complex(
  mapping = NULL,
  data = NULL,
  stat = "SimplicialComplex",
  position = "identity",
  zero_skeleton = TRUE,
  one_skeleton = FALSE,
  simplexes = TRUE,
  simplex_boundary = TRUE,
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object to use display the data}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{simplex_boundary}{}
}
\description{
Compute and plot simplicicial complexes for a specified radius or diameter...
}
\section{Aesthetics}{
 geom_hdr understands the following aesthetics (required
aesthetics are in bold):
\itemize{
\item \strong{x}
\item \strong{y}
\item alpha
\item color
\item fill
\item group
\item linetype
\item size
}
}

\section{Computed variables}{


\describe{ \item{dim}{The dimension of the corresponding simplex}}
}

\examples{

# generate a noisy circle
n <- 36; sd <- .2
set.seed(0)
t <- stats::runif(n = n, min = 0, max = 2*pi)
df <- data.frame(
  x = cos(t) + stats::rnorm(n = n, mean = 0, sd = sd),
  y = sin(t) + stats::rnorm(n = n, mean = 0, sd = sd)
)

# default, visualizing dim w/ alpha:
ggplot(df, aes(x, y)) +
  geom_simplicial_complex(radius = .4)

# visualizing dim w/ fill:
ggplot(df, aes(x, y)) +
  geom_simplicial_complex(
    mapping = aes(fill = after_stat(dim)),
    alpha = .5, radius = .4
  )


# Visualizing multiple groups together
n <- 72; sd <- .2
set.seed(0)
t <- stats::runif(n = n, min = 0, max = 2*pi)
df_mix <- data.frame(
  x = cos(t) + stats::rnorm(n = n, mean = 0, sd = sd),
  y = sin(t) + stats::rnorm(n = n, mean = 0, sd = sd)
)

df_mix$x <- df_mix$x + rep(c(-2, 2), length.out = n)
df_mix$lab <- rep(c("a", "b"), length.out = n)

ggplot(df_mix, aes(x, y, fill = lab)) +
  geom_simplicial_complex(radius = .4)
}
\keyword{datasets}
