% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/persistence.R
\docType{data}
\name{geom_persistence}
\alias{geom_persistence}
\alias{StatPersistence}
\alias{stat_persistence}
\alias{GeomPersistence}
\alias{StatBarcode}
\alias{stat_barcode}
\alias{GeomBarcode}
\alias{geom_barcode}
\title{Title}
\format{
An object of class \code{StatPersistence} (inherits from \code{Stat}, \code{ggproto}, \code{gg}) of length 4.

An object of class \code{GeomPersistence} (inherits from \code{GeomPoint}, \code{Geom}, \code{ggproto}, \code{gg}) of length 2.

An object of class \code{StatBarcode} (inherits from \code{StatPersistence}, \code{Stat}, \code{ggproto}, \code{gg}) of length 2.

An object of class \code{GeomBarcode} (inherits from \code{GeomSegment}, \code{Geom}, \code{ggproto}, \code{gg}) of length 2.
}
\usage{
StatPersistence

stat_persistence(
  mapping = NULL,
  data = NULL,
  geom = "persistence",
  position = "identity",
  ...,
  k = 1,
  point_cloud = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

GeomPersistence

geom_persistence(
  mapping = NULL,
  data = NULL,
  stat = "persistence",
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

StatBarcode

stat_barcode(
  mapping = NULL,
  data = NULL,
  geom = "barcode",
  position = "identity",
  ...,
  k = 1,
  point_cloud = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

GeomBarcode

geom_barcode(
  mapping = NULL,
  data = NULL,
  stat = "barcode",
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object to use display the data}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{point_cloud}{}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}
}
\description{
Compute persistence homologies and plot as barcode charts and persistence diagrams.
Accepts either a singular point cloud of arbitrary dimension via the \code{point_cloud} argument
or several, via the \code{point_data} aesthetic mapping.
}
\section{Aesthetics}{
 geom_hdr understands the following aesthetics (required
aesthetics are in bold):
\itemize{
\item point_data
\item alpha
\item color
\item group
\item linetype
\item size
\item x
\item y
\item xend
\item yend
}
}

\section{Computed variables}{


\describe{ \item{birth}{The diameter when the feature appears}}
\describe{ \item{death}{The diameter when the feature dissapears}}
\describe{ \item{feature_id}{A unique id assigned to each feature}}
\describe{ \item{dim}{The dimension of the feature}}
}

\examples{

# generate a noisy circle
n <- 36; sd <- .2
set.seed(0)
t <- stats::runif(n = n, min = 0, max = 2*pi)
df <- data.frame(
  x = cos(t) + stats::rnorm(n = n, mean = 0, sd = sd),
  y = sin(t) + stats::rnorm(n = n, mean = 0, sd = sd)
)

ggplot() +
  geom_barcode(point_cloud = df) +
  scale_color_viridis_d(end = .6)

ggplot() +
  geom_persistence(point_cloud = df) +
  geom_abline(intercept = 0, slope = 1) +
  coord_fixed() +
  scale_color_viridis_d(end = .6)

# Visualizing multiple groups together
# making use of point_data aesthetic mapping
n <- 72; sd <- .2
set.seed(0)
t <- stats::runif(n = n, min = 0, max = 2*pi)
df_mix <- data.frame(
  x = cos(t) + stats::rnorm(n = n, mean = 0, sd = sd),
  y = sin(t) + stats::rnorm(n = n, mean = 0, sd = sd)
)

df_mix$x <- df_mix$x + rep(c(-2, 2), length.out = n)
df_mix$lab <- rep(c("a", "b"), length.out = n)

df_nested <- dplyr::group_by(df_mix, lab)
df_nested <- tidyr::nest(df_nested)

ggplot(df_nested) +
  geom_barcode(aes(point_data = data)) +
  facet_wrap(vars(lab)) +
  scale_color_viridis_d(end = .6)

ggplot(df_nested) +
  geom_persistence(aes(point_data = data)) +
  geom_abline(intercept = 0, slope = 1) +
  coord_fixed() +
  facet_wrap(vars(lab)) +
  scale_color_viridis_d(end = .6)

ggplot(df_nested) +
  geom_persistence(aes(point_data = data, shape = lab), size = 3) +
  geom_abline(intercept = 0, slope = 1) +
  coord_fixed() +
  scale_color_viridis_d(end = .6)
}
\keyword{datasets}
